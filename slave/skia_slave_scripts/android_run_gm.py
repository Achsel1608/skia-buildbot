#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

""" This script is a wrapper for running GM on an Android device.  First, we
prepare the device by clearing and creating the output image directory, then we
run GM, and then we pull the output images from the device to the host. """

import optparse
import os
import shutil
import skia_slave_utils
import sys

BINARY_NAME = 'gm'
DEVICE_PATH = '/sdcard/gm/'

def _DeviceNameToDirName(device):
  return 'base-android-' + device.replace('_', '-')

def _PreGM(serial, dir_name):
  """ Prepare the device to run gm
  
  serial: string indicating the serial number of the target device
  dir_name: string indicating the name of the baseline image directory to write
  """
  skia_slave_utils.RunADB(serial, 'root')
  skia_slave_utils.RunADB(serial, 'remount')
  try:
    skia_slave_utils.RunADB(
        serial, 'shell rm -r %s%s' % (DEVICE_PATH, dir_name))
  except:
    pass
  skia_slave_utils.RunADB(
      serial, 'shell mkdir -p %s%s' % (DEVICE_PATH, dir_name))

def _PostGM(serial, dir_name):
  """ Pull images generated by gm from the device to the host.
  
  serial: string indicating the serial number of the target device
  dir_name: string indicating the name of the baseline image directory to write
  """
  gm_actual_dir = os.path.join('..', '..', 'gm', 'actual', dir_name)
  # Here we make the assumption that nobody else is messing with this area of
  # the file system.
  shutil.rmtree(gm_actual_dir)
  os.makedirs(gm_actual_dir)
  skia_slave_utils.RunADB(serial, 'pull %s%s %s' % (
      DEVICE_PATH, dir_name, gm_actual_dir))
  skia_slave_utils.RunADB(serial, 'shell rm -r %s%s' % (
      DEVICE_PATH, dir_name))

def main(argv):
  """ Verify that the command-line options are set, prepare the device, run GM,
  and copy the output images to the host."""
  option_parser = optparse.OptionParser()
  option_parser.add_option(
      '--device',
      help='type of device where the files will be copied')
  option_parser.add_option(
      '--args',
      help='extra arguments to pass to GM')
  (options, args) = option_parser.parse_args()
  if len(args) != 0:
    raise Exception('bogus command-line argument; rerun with --help')
  skia_slave_utils.ConfirmOptionsSet({'--device': options.device,
                                      '--args': options.args})
  dir_name = _DeviceNameToDirName(options.device)
  serial = skia_slave_utils.GetSerial(options.device)
  _PreGM(serial=serial, dir_name=dir_name)
  arguments = '%s -w %s%s' % (options.args, DEVICE_PATH, dir_name)
  skia_slave_utils.Run(serial=serial, binary_name=BINARY_NAME,
                       arguments=arguments)
  _PostGM(serial=serial, dir_name=dir_name)
  return 0

if '__main__' == __name__:
  sys.exit(main(None))