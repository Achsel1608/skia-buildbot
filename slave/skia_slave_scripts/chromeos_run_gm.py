#!/usr/bin/env python
# Copyright (c) 2012 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

""" Run the Skia GM executable. """

from build_step import BuildStep
from chromeos_build_step import ChromeOSBuildStep
from run_gm import RunGM
from utils import ssh_utils
import errno
import os
import posixpath
import shutil
import sys


class ChromeOSRunGM(ChromeOSBuildStep, RunGM):
  def _PullImages(self):
    """ Pull images generated by gm from the device to the host. """
    # Here we make the assumption that nobody else is messing with this area of
    # the file system.
    if os.path.exists(self._gm_actual_dir):
      shutil.rmtree(self._gm_actual_dir)
    os.makedirs(self._gm_actual_dir)
    ssh_utils.GetSCP(self._gm_actual_basedir,
                     posixpath.join(self._device_dirs.GMDir(),
                                    self._gm_image_subdir),
                     self._ssh_username, self._ssh_host, self._ssh_port,
                     recurse=True)
    ssh_utils.RunSSH(self._ssh_username, self._ssh_host, self._ssh_port,
                     ['rm', '-rf', self._device_dirs.GMDir()])

  def _Run(self):
    self._PreGM()
    try:
      ssh_utils.RunSSH(self._ssh_username, self._ssh_host, self._ssh_port,
                       ['rm', '-rf', posixpath.join(self._device_dirs.GMDir(),
                                                    self._gm_image_subdir)])
    except:
      pass
    ssh_utils.RunSSH(self._ssh_username, self._ssh_host, self._ssh_port,
                     ['mkdir', '-p', posixpath.join(self._device_dirs.GMDir(),
                                                    self._gm_image_subdir)])
    arguments = (['-w', posixpath.join(self._device_dirs.GMDir(),
                                       self._gm_image_subdir)]
                 + self._gm_args)
    try:
      ssh_utils.RunSSH(self._ssh_username, self._ssh_host, self._ssh_port,
                       ['skia_gm'] + arguments)
    finally:
      self._PullImages()


if '__main__' == __name__:
  sys.exit(BuildStep.RunBuildStep(ChromeOSRunGM))