# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os
import socket

# These modules come from scripts/master, which must be in the PYTHONPATH.
from buildbot.status import mail
from master import master_utils
from master import slaves_list

import site_config
import skia_factory

ActiveMaster = site_config.Master.Skia

# Boolean indicating whether we are running in test or production
IS_PRODUCTION_MODE = ActiveMaster.is_production_host


c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []

import master_source_cfg

master_source_cfg.Update(site_config, ActiveMaster, c)


def AddBuilder(name, category, factory):
  """Add a builder to the BuildmasterConfig['builders'] list.

  name: string to display at top of the column in buildbot display
  category: TODO(epoger): I'm not sure what this string is used for
  factory: object that returns a BuildFactory when its Build() method is called
  """
  BuildmasterConfig['builders'].append({
      'name': name,
      'category': category,
      'factory': factory.Build(),
      })


# Add all the builders.
#
# Don't put spaces or 'funny characters' within the builder names, so that
# we can safely use the builder name as part of a filepath.
#
# TODO(epoger): for now, I am manually adding the builder name to each
# perf_output_dir below. This should be automatic, because when we generate
# the graphs we require that they were assembled with builder name anyway.
AddBuilder(name='Skia_Linux_Fixed_Debug', category='linux',
           factory=skia_factory.SkiaFactory(
               build_subdir='Skia', target_platform='linux',
               buildtype='Debug', additional_gyp_args='-Dskia_scalar=fixed',
               gm_image_subdir='base-linux-fixed',
               perf_output_dir=None, # no perf measurement for debug builds
               ))
AddBuilder(name='Skia_Linux_Fixed_NoDebug', category='linux',
           factory=skia_factory.SkiaFactory(
               build_subdir='Skia', target_platform='linux',
               buildtype='Release', additional_gyp_args='-Dskia_scalar=fixed',
               gm_image_subdir='base-linux-fixed',
               perf_output_dir=os.path.join(
                   ActiveMaster.perf_output_dir, 'Skia_Linux_Fixed_NoDebug'),
               ))
AddBuilder(name='Skia_Linux_Float_Debug', category='linux',
           factory=skia_factory.SkiaFactory(
               build_subdir='Skia', target_platform='linux',
               buildtype='Debug', additional_gyp_args='-Dskia_scalar=float',
               gm_image_subdir='base-linux',
               perf_output_dir=None, # no perf measurement for debug builds
               ))
AddBuilder(name='Skia_Linux_Float_NoDebug', category='linux',
           factory=skia_factory.SkiaFactory(
               build_subdir='Skia', target_platform='linux',
               buildtype='Release', additional_gyp_args='-Dskia_scalar=float',
               gm_image_subdir='base-linux',
               perf_output_dir=os.path.join(
                   ActiveMaster.perf_output_dir, 'Skia_Linux_Float_NoDebug'),
               ))


# Associate the slaves to the manual builders. The configuration is in
# slaves.cfg.
slaves = slaves_list.SlavesList('slaves.cfg', 'Skia')
for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           site_config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)


# Adds common status and tools to this master.
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=False)

# Add our own mail notifiers (only in production mode):
# 1. email the committer whether it succeeded or failed
# 2. email skia-commit list only if it changed test results
if IS_PRODUCTION_MODE:
  c['status'].append(mail.MailNotifier(
      fromaddr=ActiveMaster.from_address,
      sendToInterestedUsers=True,
      extraRecipients=['skia-commit@googlegroups.com'],
      mode='change',
      relayhost=site_config.Master.smtp,
      lookup=master_utils.FilterDomain()))
