# Copyright (c) 2011 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import os

# These modules come from $(TOPLEVEL_DIR)/scripts ,
# which must be in the PYTHONPATH.
from master import master_utils
from master import slaves_list
import skia_notifier

# This module comes from $(TOPLEVEL_DIR)/site_config ,
# which must be in the PYTHONPATH.
import config

# These modules come from the local directory.
from skia_master_scripts import utils
import master_builders_cfg
import master_private_builders_cfg
import master_source_cfg


c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['status'] = []


if os.environ.get('PRIVATE_MASTER'):
  ActiveMaster = config.Master.PrivateSkia
  master_source_cfg.Update(config, ActiveMaster, c)
  master_private_builders_cfg.Update(config, ActiveMaster, c)
  # Associate the slaves to the manual builders. The configuration is in
  # private_slaves.cfg.
  slaves = slaves_list.SlavesList('private_slaves.cfg', ActiveMaster.__name__)
else:
  ActiveMaster = config.Master.Skia
  master_source_cfg.Update(config, ActiveMaster, c)
  master_builders_cfg.Update(config, ActiveMaster, c)
  # Associate the slaves to the manual builders. The configuration is in
  # slaves.cfg.
  slaves = slaves_list.SlavesList('slaves.cfg', ActiveMaster.__name__)


for builder in c['builders']:
  builder['slavenames'] = slaves.GetSlavesName(builder=builder['name'])


# The 'slaves' list defines the set of allowable buildslaves. List all the
# slaves registered to a builder. Remove dupes.
c['slaves'] = master_utils.AutoSetupSlaves(c['builders'],
                                           config.Master.GetBotPassword())
master_utils.VerifySetup(c, slaves)

# For each slave instance, add the key/value pairs in its associated dictionary,
# defined in slaves.cfg, to its build properties. This allows us to access
# extra attributes defined in slaves.cfg using WithProperties.
for slave_instance in c['slaves']:
  for slave_dict in slaves.GetSlaves():
    if slave_dict['hostname'] == slave_instance.identity()[0]:
      slave_instance.properties.update(slave_dict, 'BuildSlave')
      break

# Adds common status and tools to this master.
c['buildbotURL'] = 'http://%s:%d/' % (
    ActiveMaster.master_host, ActiveMaster.master_port)
master_utils.AutoSetupMaster(c, ActiveMaster, mail_notifier=False)

# Add our own mail notifier (only in production mode):
# email the committer (and skia-commit list) only if it changed test results
if ActiveMaster.is_production_host:
  mail_notifier = skia_notifier.SkiaNotifier(
      fromaddr=ActiveMaster.from_address,
      sendToInterestedUsers=True,
      extraRecipients=['skia-commit@googlegroups.com'],
      mode='change',
      relayhost=config.Master.smtp,
      lookup=master_utils.FilterDomain(
          permitted_domains=config.Master.permitted_domains))
  c['status'].append(mail_notifier)

c['mergeRequests'] = utils.CanMergeBuildRequests
