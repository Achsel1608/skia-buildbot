// Code generated by protoc-gen-go.
// source: go/buildbot/rpc/buildbot.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	go/buildbot/rpc/buildbot.proto

It has these top-level messages:
	Bool
	Build
	Builds
	BuildID
	BuildIDs
	Empty
	Int64
	Master
	GetBuildsForCommitsRequest
	GetBuildsForCommitsResponse
	GetBuildFromDBRequest
	GetBuildsFromDateRangeRequest
	GetBuildNumberForCommitRequest
	GetMaxBuildNumberRequest
	PutBuildsRequest
	NumIngestedBuildsResponse
	PutBuildCommentRequest
	DeleteBuildCommentRequest
	GetBuilderCommentsRequest
	GetBuilderCommentsResponse
	GetBuildersCommentsRequest
	GetBuildersCommentsResponse
	PutBuilderCommentRequest
	DeleteBuilderCommentRequest
	GetCommitCommentsRequest
	GetCommitCommentsResponse
	GetCommitsCommentsRequest
	GetCommitsCommentsResponse
	PutCommitCommentRequest
	DeleteCommitCommentRequest
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Bool struct {
	Val bool `protobuf:"varint,1,opt,name=val" json:"val,omitempty"`
}

func (m *Bool) Reset()                    { *m = Bool{} }
func (m *Bool) String() string            { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()               {}
func (*Bool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Build struct {
	Build []byte `protobuf:"bytes,1,opt,name=build,proto3" json:"build,omitempty"`
}

func (m *Build) Reset()                    { *m = Build{} }
func (m *Build) String() string            { return proto.CompactTextString(m) }
func (*Build) ProtoMessage()               {}
func (*Build) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Builds struct {
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
}

func (m *Builds) Reset()                    { *m = Builds{} }
func (m *Builds) String() string            { return proto.CompactTextString(m) }
func (*Builds) ProtoMessage()               {}
func (*Builds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Builds) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type BuildID struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *BuildID) Reset()                    { *m = BuildID{} }
func (m *BuildID) String() string            { return proto.CompactTextString(m) }
func (*BuildID) ProtoMessage()               {}
func (*BuildID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type BuildIDs struct {
	Ids []*BuildID `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *BuildIDs) Reset()                    { *m = BuildIDs{} }
func (m *BuildIDs) String() string            { return proto.CompactTextString(m) }
func (*BuildIDs) ProtoMessage()               {}
func (*BuildIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BuildIDs) GetIds() []*BuildID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Int64 struct {
	Val int64 `protobuf:"varint,1,opt,name=val" json:"val,omitempty"`
}

func (m *Int64) Reset()                    { *m = Int64{} }
func (m *Int64) String() string            { return proto.CompactTextString(m) }
func (*Int64) ProtoMessage()               {}
func (*Int64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Master struct {
	Master string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
}

func (m *Master) Reset()                    { *m = Master{} }
func (m *Master) String() string            { return proto.CompactTextString(m) }
func (*Master) ProtoMessage()               {}
func (*Master) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetBuildsForCommitsRequest struct {
	Commits []string `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
	Ignore  []string `protobuf:"bytes,2,rep,name=ignore" json:"ignore,omitempty"`
}

func (m *GetBuildsForCommitsRequest) Reset()                    { *m = GetBuildsForCommitsRequest{} }
func (m *GetBuildsForCommitsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildsForCommitsRequest) ProtoMessage()               {}
func (*GetBuildsForCommitsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetBuildsForCommitsResponse struct {
	Builds map[string]*Builds `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetBuildsForCommitsResponse) Reset()                    { *m = GetBuildsForCommitsResponse{} }
func (m *GetBuildsForCommitsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBuildsForCommitsResponse) ProtoMessage()               {}
func (*GetBuildsForCommitsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetBuildsForCommitsResponse) GetBuilds() map[string]*Builds {
	if m != nil {
		return m.Builds
	}
	return nil
}

type GetBuildFromDBRequest struct {
	Master  string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Builder string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
	Number  int64  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
}

func (m *GetBuildFromDBRequest) Reset()                    { *m = GetBuildFromDBRequest{} }
func (m *GetBuildFromDBRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildFromDBRequest) ProtoMessage()               {}
func (*GetBuildFromDBRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetBuildsFromDateRangeRequest struct {
	Start string `protobuf:"bytes,1,opt,name=start" json:"start,omitempty"`
	End   string `protobuf:"bytes,2,opt,name=end" json:"end,omitempty"`
}

func (m *GetBuildsFromDateRangeRequest) Reset()                    { *m = GetBuildsFromDateRangeRequest{} }
func (m *GetBuildsFromDateRangeRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildsFromDateRangeRequest) ProtoMessage()               {}
func (*GetBuildsFromDateRangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetBuildNumberForCommitRequest struct {
	Master  string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Builder string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
	Commit  string `protobuf:"bytes,3,opt,name=commit" json:"commit,omitempty"`
}

func (m *GetBuildNumberForCommitRequest) Reset()                    { *m = GetBuildNumberForCommitRequest{} }
func (m *GetBuildNumberForCommitRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildNumberForCommitRequest) ProtoMessage()               {}
func (*GetBuildNumberForCommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetMaxBuildNumberRequest struct {
	Master  string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Builder string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
}

func (m *GetMaxBuildNumberRequest) Reset()                    { *m = GetMaxBuildNumberRequest{} }
func (m *GetMaxBuildNumberRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMaxBuildNumberRequest) ProtoMessage()               {}
func (*GetMaxBuildNumberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type PutBuildsRequest struct {
	Builds []*Build `protobuf:"bytes,1,rep,name=builds" json:"builds,omitempty"`
}

func (m *PutBuildsRequest) Reset()                    { *m = PutBuildsRequest{} }
func (m *PutBuildsRequest) String() string            { return proto.CompactTextString(m) }
func (*PutBuildsRequest) ProtoMessage()               {}
func (*PutBuildsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *PutBuildsRequest) GetBuilds() []*Build {
	if m != nil {
		return m.Builds
	}
	return nil
}

type NumIngestedBuildsResponse struct {
	Ingested int64 `protobuf:"varint,1,opt,name=ingested" json:"ingested,omitempty"`
}

func (m *NumIngestedBuildsResponse) Reset()                    { *m = NumIngestedBuildsResponse{} }
func (m *NumIngestedBuildsResponse) String() string            { return proto.CompactTextString(m) }
func (*NumIngestedBuildsResponse) ProtoMessage()               {}
func (*NumIngestedBuildsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type PutBuildCommentRequest struct {
	Master  string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Builder string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
	Number  int64  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Comment []byte `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PutBuildCommentRequest) Reset()                    { *m = PutBuildCommentRequest{} }
func (m *PutBuildCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*PutBuildCommentRequest) ProtoMessage()               {}
func (*PutBuildCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type DeleteBuildCommentRequest struct {
	Master  string `protobuf:"bytes,1,opt,name=master" json:"master,omitempty"`
	Builder string `protobuf:"bytes,2,opt,name=builder" json:"builder,omitempty"`
	Number  int64  `protobuf:"varint,3,opt,name=number" json:"number,omitempty"`
	Id      int64  `protobuf:"varint,4,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteBuildCommentRequest) Reset()                    { *m = DeleteBuildCommentRequest{} }
func (m *DeleteBuildCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBuildCommentRequest) ProtoMessage()               {}
func (*DeleteBuildCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type GetBuilderCommentsRequest struct {
	Builder string `protobuf:"bytes,1,opt,name=builder" json:"builder,omitempty"`
}

func (m *GetBuilderCommentsRequest) Reset()                    { *m = GetBuilderCommentsRequest{} }
func (m *GetBuilderCommentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuilderCommentsRequest) ProtoMessage()               {}
func (*GetBuilderCommentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type GetBuilderCommentsResponse struct {
	Comments [][]byte `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (m *GetBuilderCommentsResponse) Reset()                    { *m = GetBuilderCommentsResponse{} }
func (m *GetBuilderCommentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBuilderCommentsResponse) ProtoMessage()               {}
func (*GetBuilderCommentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type GetBuildersCommentsRequest struct {
	Builders []string `protobuf:"bytes,1,rep,name=builders" json:"builders,omitempty"`
}

func (m *GetBuildersCommentsRequest) Reset()                    { *m = GetBuildersCommentsRequest{} }
func (m *GetBuildersCommentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBuildersCommentsRequest) ProtoMessage()               {}
func (*GetBuildersCommentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type GetBuildersCommentsResponse struct {
	Comments map[string]*GetBuilderCommentsResponse `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetBuildersCommentsResponse) Reset()                    { *m = GetBuildersCommentsResponse{} }
func (m *GetBuildersCommentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetBuildersCommentsResponse) ProtoMessage()               {}
func (*GetBuildersCommentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetBuildersCommentsResponse) GetComments() map[string]*GetBuilderCommentsResponse {
	if m != nil {
		return m.Comments
	}
	return nil
}

type PutBuilderCommentRequest struct {
	Comment []byte `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PutBuilderCommentRequest) Reset()                    { *m = PutBuilderCommentRequest{} }
func (m *PutBuilderCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*PutBuilderCommentRequest) ProtoMessage()               {}
func (*PutBuilderCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type DeleteBuilderCommentRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteBuilderCommentRequest) Reset()                    { *m = DeleteBuilderCommentRequest{} }
func (m *DeleteBuilderCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteBuilderCommentRequest) ProtoMessage()               {}
func (*DeleteBuilderCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type GetCommitCommentsRequest struct {
	Commit string `protobuf:"bytes,1,opt,name=commit" json:"commit,omitempty"`
}

func (m *GetCommitCommentsRequest) Reset()                    { *m = GetCommitCommentsRequest{} }
func (m *GetCommitCommentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCommitCommentsRequest) ProtoMessage()               {}
func (*GetCommitCommentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type GetCommitCommentsResponse struct {
	Comments [][]byte `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
}

func (m *GetCommitCommentsResponse) Reset()                    { *m = GetCommitCommentsResponse{} }
func (m *GetCommitCommentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCommitCommentsResponse) ProtoMessage()               {}
func (*GetCommitCommentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type GetCommitsCommentsRequest struct {
	Commits []string `protobuf:"bytes,1,rep,name=commits" json:"commits,omitempty"`
}

func (m *GetCommitsCommentsRequest) Reset()                    { *m = GetCommitsCommentsRequest{} }
func (m *GetCommitsCommentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCommitsCommentsRequest) ProtoMessage()               {}
func (*GetCommitsCommentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type GetCommitsCommentsResponse struct {
	Comments map[string]*GetCommitCommentsResponse `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCommitsCommentsResponse) Reset()                    { *m = GetCommitsCommentsResponse{} }
func (m *GetCommitsCommentsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetCommitsCommentsResponse) ProtoMessage()               {}
func (*GetCommitsCommentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *GetCommitsCommentsResponse) GetComments() map[string]*GetCommitCommentsResponse {
	if m != nil {
		return m.Comments
	}
	return nil
}

type PutCommitCommentRequest struct {
	Comment []byte `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (m *PutCommitCommentRequest) Reset()                    { *m = PutCommitCommentRequest{} }
func (m *PutCommitCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*PutCommitCommentRequest) ProtoMessage()               {}
func (*PutCommitCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type DeleteCommitCommentRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteCommitCommentRequest) Reset()                    { *m = DeleteCommitCommentRequest{} }
func (m *DeleteCommitCommentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteCommitCommentRequest) ProtoMessage()               {}
func (*DeleteCommitCommentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func init() {
	proto.RegisterType((*Bool)(nil), "rpc.Bool")
	proto.RegisterType((*Build)(nil), "rpc.Build")
	proto.RegisterType((*Builds)(nil), "rpc.Builds")
	proto.RegisterType((*BuildID)(nil), "rpc.BuildID")
	proto.RegisterType((*BuildIDs)(nil), "rpc.BuildIDs")
	proto.RegisterType((*Empty)(nil), "rpc.Empty")
	proto.RegisterType((*Int64)(nil), "rpc.Int64")
	proto.RegisterType((*Master)(nil), "rpc.Master")
	proto.RegisterType((*GetBuildsForCommitsRequest)(nil), "rpc.GetBuildsForCommitsRequest")
	proto.RegisterType((*GetBuildsForCommitsResponse)(nil), "rpc.GetBuildsForCommitsResponse")
	proto.RegisterType((*GetBuildFromDBRequest)(nil), "rpc.GetBuildFromDBRequest")
	proto.RegisterType((*GetBuildsFromDateRangeRequest)(nil), "rpc.GetBuildsFromDateRangeRequest")
	proto.RegisterType((*GetBuildNumberForCommitRequest)(nil), "rpc.GetBuildNumberForCommitRequest")
	proto.RegisterType((*GetMaxBuildNumberRequest)(nil), "rpc.GetMaxBuildNumberRequest")
	proto.RegisterType((*PutBuildsRequest)(nil), "rpc.PutBuildsRequest")
	proto.RegisterType((*NumIngestedBuildsResponse)(nil), "rpc.NumIngestedBuildsResponse")
	proto.RegisterType((*PutBuildCommentRequest)(nil), "rpc.PutBuildCommentRequest")
	proto.RegisterType((*DeleteBuildCommentRequest)(nil), "rpc.DeleteBuildCommentRequest")
	proto.RegisterType((*GetBuilderCommentsRequest)(nil), "rpc.GetBuilderCommentsRequest")
	proto.RegisterType((*GetBuilderCommentsResponse)(nil), "rpc.GetBuilderCommentsResponse")
	proto.RegisterType((*GetBuildersCommentsRequest)(nil), "rpc.GetBuildersCommentsRequest")
	proto.RegisterType((*GetBuildersCommentsResponse)(nil), "rpc.GetBuildersCommentsResponse")
	proto.RegisterType((*PutBuilderCommentRequest)(nil), "rpc.PutBuilderCommentRequest")
	proto.RegisterType((*DeleteBuilderCommentRequest)(nil), "rpc.DeleteBuilderCommentRequest")
	proto.RegisterType((*GetCommitCommentsRequest)(nil), "rpc.GetCommitCommentsRequest")
	proto.RegisterType((*GetCommitCommentsResponse)(nil), "rpc.GetCommitCommentsResponse")
	proto.RegisterType((*GetCommitsCommentsRequest)(nil), "rpc.GetCommitsCommentsRequest")
	proto.RegisterType((*GetCommitsCommentsResponse)(nil), "rpc.GetCommitsCommentsResponse")
	proto.RegisterType((*PutCommitCommentRequest)(nil), "rpc.PutCommitCommentRequest")
	proto.RegisterType((*DeleteCommitCommentRequest)(nil), "rpc.DeleteCommitCommentRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for BuildbotDB service

type BuildbotDBClient interface {
	BuildExists(ctx context.Context, in *GetBuildFromDBRequest, opts ...grpc.CallOption) (*Bool, error)
	GetBuildsForCommits(ctx context.Context, in *GetBuildsForCommitsRequest, opts ...grpc.CallOption) (*GetBuildsForCommitsResponse, error)
	GetBuild(ctx context.Context, in *BuildID, opts ...grpc.CallOption) (*Build, error)
	GetBuildFromDB(ctx context.Context, in *GetBuildFromDBRequest, opts ...grpc.CallOption) (*Build, error)
	GetBuildsFromDateRange(ctx context.Context, in *GetBuildsFromDateRangeRequest, opts ...grpc.CallOption) (*Builds, error)
	GetBuildNumberForCommit(ctx context.Context, in *GetBuildNumberForCommitRequest, opts ...grpc.CallOption) (*Int64, error)
	GetLastProcessedBuilds(ctx context.Context, in *Master, opts ...grpc.CallOption) (*BuildIDs, error)
	GetMaxBuildNumber(ctx context.Context, in *GetMaxBuildNumberRequest, opts ...grpc.CallOption) (*Int64, error)
	GetUnfinishedBuilds(ctx context.Context, in *Master, opts ...grpc.CallOption) (*Builds, error)
	PutBuild(ctx context.Context, in *Build, opts ...grpc.CallOption) (*Empty, error)
	PutBuilds(ctx context.Context, in *PutBuildsRequest, opts ...grpc.CallOption) (*Empty, error)
	NumIngestedBuilds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumIngestedBuildsResponse, error)
	PutBuildComment(ctx context.Context, in *PutBuildCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteBuildComment(ctx context.Context, in *DeleteBuildCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetBuilderComments(ctx context.Context, in *GetBuilderCommentsRequest, opts ...grpc.CallOption) (*GetBuilderCommentsResponse, error)
	GetBuildersComments(ctx context.Context, in *GetBuildersCommentsRequest, opts ...grpc.CallOption) (*GetBuildersCommentsResponse, error)
	PutBuilderComment(ctx context.Context, in *PutBuilderCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteBuilderComment(ctx context.Context, in *DeleteBuilderCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCommitComments(ctx context.Context, in *GetCommitCommentsRequest, opts ...grpc.CallOption) (*GetCommitCommentsResponse, error)
	GetCommitsComments(ctx context.Context, in *GetCommitsCommentsRequest, opts ...grpc.CallOption) (*GetCommitsCommentsResponse, error)
	PutCommitComment(ctx context.Context, in *PutCommitCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteCommitComment(ctx context.Context, in *DeleteCommitCommentRequest, opts ...grpc.CallOption) (*Empty, error)
}

type buildbotDBClient struct {
	cc *grpc.ClientConn
}

func NewBuildbotDBClient(cc *grpc.ClientConn) BuildbotDBClient {
	return &buildbotDBClient{cc}
}

func (c *buildbotDBClient) BuildExists(ctx context.Context, in *GetBuildFromDBRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/BuildExists", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuildsForCommits(ctx context.Context, in *GetBuildsForCommitsRequest, opts ...grpc.CallOption) (*GetBuildsForCommitsResponse, error) {
	out := new(GetBuildsForCommitsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuildsForCommits", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuild(ctx context.Context, in *BuildID, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuildFromDB(ctx context.Context, in *GetBuildFromDBRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuildFromDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuildsFromDateRange(ctx context.Context, in *GetBuildsFromDateRangeRequest, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuildsFromDateRange", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuildNumberForCommit(ctx context.Context, in *GetBuildNumberForCommitRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuildNumberForCommit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetLastProcessedBuilds(ctx context.Context, in *Master, opts ...grpc.CallOption) (*BuildIDs, error) {
	out := new(BuildIDs)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetLastProcessedBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetMaxBuildNumber(ctx context.Context, in *GetMaxBuildNumberRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetMaxBuildNumber", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetUnfinishedBuilds(ctx context.Context, in *Master, opts ...grpc.CallOption) (*Builds, error) {
	out := new(Builds)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetUnfinishedBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) PutBuild(ctx context.Context, in *Build, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/PutBuild", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) PutBuilds(ctx context.Context, in *PutBuildsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/PutBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) NumIngestedBuilds(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*NumIngestedBuildsResponse, error) {
	out := new(NumIngestedBuildsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/NumIngestedBuilds", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) PutBuildComment(ctx context.Context, in *PutBuildCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/PutBuildComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) DeleteBuildComment(ctx context.Context, in *DeleteBuildCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/DeleteBuildComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuilderComments(ctx context.Context, in *GetBuilderCommentsRequest, opts ...grpc.CallOption) (*GetBuilderCommentsResponse, error) {
	out := new(GetBuilderCommentsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuilderComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetBuildersComments(ctx context.Context, in *GetBuildersCommentsRequest, opts ...grpc.CallOption) (*GetBuildersCommentsResponse, error) {
	out := new(GetBuildersCommentsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetBuildersComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) PutBuilderComment(ctx context.Context, in *PutBuilderCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/PutBuilderComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) DeleteBuilderComment(ctx context.Context, in *DeleteBuilderCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/DeleteBuilderComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetCommitComments(ctx context.Context, in *GetCommitCommentsRequest, opts ...grpc.CallOption) (*GetCommitCommentsResponse, error) {
	out := new(GetCommitCommentsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetCommitComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) GetCommitsComments(ctx context.Context, in *GetCommitsCommentsRequest, opts ...grpc.CallOption) (*GetCommitsCommentsResponse, error) {
	out := new(GetCommitsCommentsResponse)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/GetCommitsComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) PutCommitComment(ctx context.Context, in *PutCommitCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/PutCommitComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildbotDBClient) DeleteCommitComment(ctx context.Context, in *DeleteCommitCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/rpc.BuildbotDB/DeleteCommitComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BuildbotDB service

type BuildbotDBServer interface {
	BuildExists(context.Context, *GetBuildFromDBRequest) (*Bool, error)
	GetBuildsForCommits(context.Context, *GetBuildsForCommitsRequest) (*GetBuildsForCommitsResponse, error)
	GetBuild(context.Context, *BuildID) (*Build, error)
	GetBuildFromDB(context.Context, *GetBuildFromDBRequest) (*Build, error)
	GetBuildsFromDateRange(context.Context, *GetBuildsFromDateRangeRequest) (*Builds, error)
	GetBuildNumberForCommit(context.Context, *GetBuildNumberForCommitRequest) (*Int64, error)
	GetLastProcessedBuilds(context.Context, *Master) (*BuildIDs, error)
	GetMaxBuildNumber(context.Context, *GetMaxBuildNumberRequest) (*Int64, error)
	GetUnfinishedBuilds(context.Context, *Master) (*Builds, error)
	PutBuild(context.Context, *Build) (*Empty, error)
	PutBuilds(context.Context, *PutBuildsRequest) (*Empty, error)
	NumIngestedBuilds(context.Context, *Empty) (*NumIngestedBuildsResponse, error)
	PutBuildComment(context.Context, *PutBuildCommentRequest) (*Empty, error)
	DeleteBuildComment(context.Context, *DeleteBuildCommentRequest) (*Empty, error)
	GetBuilderComments(context.Context, *GetBuilderCommentsRequest) (*GetBuilderCommentsResponse, error)
	GetBuildersComments(context.Context, *GetBuildersCommentsRequest) (*GetBuildersCommentsResponse, error)
	PutBuilderComment(context.Context, *PutBuilderCommentRequest) (*Empty, error)
	DeleteBuilderComment(context.Context, *DeleteBuilderCommentRequest) (*Empty, error)
	GetCommitComments(context.Context, *GetCommitCommentsRequest) (*GetCommitCommentsResponse, error)
	GetCommitsComments(context.Context, *GetCommitsCommentsRequest) (*GetCommitsCommentsResponse, error)
	PutCommitComment(context.Context, *PutCommitCommentRequest) (*Empty, error)
	DeleteCommitComment(context.Context, *DeleteCommitCommentRequest) (*Empty, error)
}

func RegisterBuildbotDBServer(s *grpc.Server, srv BuildbotDBServer) {
	s.RegisterService(&_BuildbotDB_serviceDesc, srv)
}

func _BuildbotDB_BuildExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildFromDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).BuildExists(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuildsForCommits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildsForCommitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuildsForCommits(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(BuildID)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuildFromDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildFromDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuildFromDB(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuildsFromDateRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildsFromDateRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuildsFromDateRange(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuildNumberForCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildNumberForCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuildNumberForCommit(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetLastProcessedBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Master)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetLastProcessedBuilds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetMaxBuildNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetMaxBuildNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetMaxBuildNumber(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetUnfinishedBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Master)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetUnfinishedBuilds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_PutBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Build)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).PutBuild(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_PutBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutBuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).PutBuilds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_NumIngestedBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).NumIngestedBuilds(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_PutBuildComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutBuildCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).PutBuildComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_DeleteBuildComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteBuildCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).DeleteBuildComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuilderComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuilderCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuilderComments(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetBuildersComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetBuildersCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetBuildersComments(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_PutBuilderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutBuilderCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).PutBuilderComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_DeleteBuilderComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteBuilderCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).DeleteBuilderComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetCommitComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetCommitCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetCommitComments(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_GetCommitsComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetCommitsCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).GetCommitsComments(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_PutCommitComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PutCommitCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).PutCommitComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _BuildbotDB_DeleteCommitComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(DeleteCommitCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(BuildbotDBServer).DeleteCommitComment(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _BuildbotDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.BuildbotDB",
	HandlerType: (*BuildbotDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildExists",
			Handler:    _BuildbotDB_BuildExists_Handler,
		},
		{
			MethodName: "GetBuildsForCommits",
			Handler:    _BuildbotDB_GetBuildsForCommits_Handler,
		},
		{
			MethodName: "GetBuild",
			Handler:    _BuildbotDB_GetBuild_Handler,
		},
		{
			MethodName: "GetBuildFromDB",
			Handler:    _BuildbotDB_GetBuildFromDB_Handler,
		},
		{
			MethodName: "GetBuildsFromDateRange",
			Handler:    _BuildbotDB_GetBuildsFromDateRange_Handler,
		},
		{
			MethodName: "GetBuildNumberForCommit",
			Handler:    _BuildbotDB_GetBuildNumberForCommit_Handler,
		},
		{
			MethodName: "GetLastProcessedBuilds",
			Handler:    _BuildbotDB_GetLastProcessedBuilds_Handler,
		},
		{
			MethodName: "GetMaxBuildNumber",
			Handler:    _BuildbotDB_GetMaxBuildNumber_Handler,
		},
		{
			MethodName: "GetUnfinishedBuilds",
			Handler:    _BuildbotDB_GetUnfinishedBuilds_Handler,
		},
		{
			MethodName: "PutBuild",
			Handler:    _BuildbotDB_PutBuild_Handler,
		},
		{
			MethodName: "PutBuilds",
			Handler:    _BuildbotDB_PutBuilds_Handler,
		},
		{
			MethodName: "NumIngestedBuilds",
			Handler:    _BuildbotDB_NumIngestedBuilds_Handler,
		},
		{
			MethodName: "PutBuildComment",
			Handler:    _BuildbotDB_PutBuildComment_Handler,
		},
		{
			MethodName: "DeleteBuildComment",
			Handler:    _BuildbotDB_DeleteBuildComment_Handler,
		},
		{
			MethodName: "GetBuilderComments",
			Handler:    _BuildbotDB_GetBuilderComments_Handler,
		},
		{
			MethodName: "GetBuildersComments",
			Handler:    _BuildbotDB_GetBuildersComments_Handler,
		},
		{
			MethodName: "PutBuilderComment",
			Handler:    _BuildbotDB_PutBuilderComment_Handler,
		},
		{
			MethodName: "DeleteBuilderComment",
			Handler:    _BuildbotDB_DeleteBuilderComment_Handler,
		},
		{
			MethodName: "GetCommitComments",
			Handler:    _BuildbotDB_GetCommitComments_Handler,
		},
		{
			MethodName: "GetCommitsComments",
			Handler:    _BuildbotDB_GetCommitsComments_Handler,
		},
		{
			MethodName: "PutCommitComment",
			Handler:    _BuildbotDB_PutCommitComment_Handler,
		},
		{
			MethodName: "DeleteCommitComment",
			Handler:    _BuildbotDB_DeleteCommitComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 976 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x57, 0xeb, 0x52, 0x23, 0x45,
	0x14, 0x26, 0x09, 0x09, 0xc9, 0x09, 0xd7, 0xe6, 0x96, 0x0c, 0x12, 0xa8, 0x16, 0x2d, 0x44, 0x12,
	0x14, 0x2d, 0xca, 0x42, 0x54, 0x8c, 0x01, 0x4d, 0x09, 0x8a, 0x94, 0x96, 0x16, 0xff, 0x12, 0x68,
	0x71, 0xca, 0x64, 0x26, 0x4e, 0x4f, 0x2c, 0x78, 0x12, 0xdf, 0xc2, 0xaa, 0x7d, 0xa0, 0x7d, 0x97,
	0xed, 0xe9, 0x4b, 0x32, 0xdd, 0xd3, 0x93, 0xec, 0x6e, 0xed, 0x3f, 0xa6, 0xfb, 0x9c, 0xef, 0x5c,
	0xbe, 0x3e, 0xe7, 0x0b, 0x50, 0x7b, 0xf4, 0x8f, 0xba, 0x43, 0xb7, 0xf7, 0xd0, 0xf5, 0xc3, 0xa3,
	0x60, 0x70, 0x3f, 0xfa, 0x68, 0x0c, 0x02, 0x3f, 0xf4, 0x51, 0x8e, 0x9d, 0xe1, 0x55, 0x98, 0x6d,
	0xfa, 0x7e, 0x0f, 0x95, 0x21, 0xf7, 0x6f, 0xa7, 0x57, 0xc9, 0xec, 0x66, 0xf6, 0x8b, 0x78, 0x03,
	0xf2, 0xcd, 0xc8, 0x16, 0x2d, 0x40, 0x9e, 0x3b, 0xf1, 0xf3, 0x79, 0xbc, 0x07, 0x05, 0x7e, 0x4e,
	0x91, 0x03, 0x05, 0x7e, 0x41, 0xd9, 0x4d, 0x6e, 0xbf, 0x7c, 0x0c, 0x0d, 0x06, 0xd6, 0xe0, 0x97,
	0x78, 0x1d, 0xe6, 0xf8, 0x1f, 0xed, 0x16, 0x02, 0xc8, 0xba, 0xca, 0xf9, 0x03, 0x28, 0xca, 0x63,
	0x8a, 0xaa, 0x90, 0x73, 0x47, 0xbe, 0xf3, 0x63, 0xdf, 0x76, 0x0b, 0xcf, 0x41, 0xfe, 0xa2, 0x3f,
	0x08, 0x9f, 0xf1, 0x1a, 0xe4, 0xdb, 0x5e, 0x78, 0xf2, 0x79, 0x3c, 0xb5, 0x1c, 0xae, 0x40, 0xe1,
	0xba, 0x43, 0x43, 0x12, 0xa0, 0x45, 0x28, 0xf4, 0xf9, 0x5f, 0xfc, 0xa6, 0x84, 0xbf, 0x02, 0xe7,
	0x7b, 0x12, 0x8a, 0xfc, 0x2e, 0xfd, 0xe0, 0x3b, 0xbf, 0xdf, 0x77, 0x43, 0x7a, 0x4b, 0xfe, 0x19,
	0x12, 0x1a, 0xa2, 0x25, 0x98, 0xbb, 0x17, 0x27, 0x3c, 0x6a, 0x29, 0x72, 0x77, 0x1f, 0x3d, 0x3f,
	0x20, 0x95, 0x6c, 0xf4, 0x8d, 0xff, 0xcb, 0xc0, 0x96, 0xd5, 0x9f, 0x0e, 0x7c, 0x8f, 0x12, 0x74,
	0x66, 0x54, 0x7c, 0xc8, 0xb3, 0x9e, 0xe0, 0x21, 0x2a, 0xa2, 0x17, 0x5e, 0x18, 0x3c, 0x3b, 0xa7,
	0x50, 0x8e, 0x7d, 0x46, 0x25, 0xfd, 0x4d, 0x9e, 0x45, 0xe2, 0xac, 0x97, 0x79, 0x56, 0xdf, 0x30,
	0x4a, 0x24, 0xc3, 0x80, 0xcb, 0xe3, 0x76, 0xd0, 0xd3, 0xec, 0x17, 0x19, 0xfc, 0x03, 0xac, 0xab,
	0x30, 0x97, 0x81, 0xdf, 0x6f, 0x35, 0x55, 0x4d, 0x46, 0x07, 0xa2, 0x1a, 0x79, 0x8a, 0xec, 0x20,
	0xcb, 0x0f, 0x98, 0x81, 0x37, 0xec, 0x77, 0xd9, 0x77, 0x8e, 0x37, 0xef, 0x4b, 0xd8, 0x1e, 0x27,
	0x1c, 0x41, 0x75, 0x42, 0x72, 0xdb, 0xf1, 0x1e, 0x89, 0x42, 0x64, 0x7c, 0xd3, 0xb0, 0x13, 0x84,
	0x12, 0x90, 0xa5, 0x49, 0xbc, 0x07, 0x01, 0x86, 0x7f, 0x81, 0x9a, 0x72, 0xfe, 0x89, 0x83, 0x8e,
	0x4a, 0x7e, 0x93, 0x7c, 0x04, 0x09, 0x3c, 0x9f, 0x12, 0xcb, 0xa7, 0xc2, 0x20, 0xaf, 0x3b, 0x4f,
	0x31, 0xd4, 0xd7, 0x05, 0xc3, 0x0d, 0x58, 0xbe, 0x19, 0xca, 0x62, 0x94, 0xd3, 0xa4, 0x67, 0x59,
	0x87, 0x2a, 0x8b, 0xd0, 0x66, 0xd5, 0x32, 0xd4, 0x07, 0xe5, 0x27, 0xd9, 0x5d, 0x86, 0xa2, 0x2b,
	0x6f, 0xe4, 0x43, 0xbb, 0x83, 0x0d, 0x05, 0x1f, 0x55, 0x49, 0xbc, 0xf0, 0x6d, 0xdb, 0xae, 0xde,
	0x1e, 0x83, 0xa8, 0xcc, 0xf2, 0x51, 0xf8, 0x03, 0xaa, 0x2d, 0xd2, 0x23, 0x21, 0x79, 0x27, 0xf0,
	0x62, 0xc8, 0x66, 0x79, 0xd6, 0x87, 0x50, 0x55, 0x24, 0x91, 0x40, 0x02, 0xc7, 0x67, 0x40, 0x21,
	0x65, 0x64, 0x0b, 0x1d, 0x9b, 0xf5, 0xb8, 0x27, 0x32, 0x6d, 0xd1, 0xce, 0x79, 0xdd, 0x9e, 0x9a,
	0xf0, 0xcc, 0x5e, 0xc2, 0xcb, 0x19, 0xc3, 0x2f, 0x62, 0x33, 0xa5, 0x39, 0xc8, 0x08, 0xe7, 0x46,
	0x84, 0xf2, 0x71, 0x43, 0x9b, 0x2a, 0x8b, 0x4f, 0x43, 0x1d, 0x88, 0xb9, 0xba, 0x81, 0x05, 0xed,
	0x40, 0x9f, 0xac, 0x86, 0x3e, 0x59, 0x3b, 0x06, 0xb8, 0x89, 0xcd, 0xa7, 0xed, 0x63, 0xa8, 0x28,
	0xde, 0x47, 0x16, 0xc6, 0x12, 0x89, 0x88, 0x14, 0x3b, 0xed, 0x23, 0xd8, 0x8a, 0x11, 0x99, 0xb0,
	0x1f, 0xaf, 0xbf, 0x1c, 0x3e, 0xe0, 0x6f, 0x5d, 0x0c, 0x8c, 0xd9, 0xb9, 0xf1, 0x5c, 0x08, 0x5e,
	0xea, 0x9c, 0x45, 0xd3, 0x36, 0x95, 0x96, 0xc3, 0x98, 0x39, 0xb5, 0x90, 0xae, 0x2d, 0x3e, 0xfc,
	0x7f, 0x86, 0xb3, 0x98, 0x30, 0x97, 0xf0, 0xdf, 0x24, 0x38, 0xa9, 0xab, 0xb6, 0xa5, 0xb8, 0x18,
	0x94, 0xfc, 0x3c, 0x91, 0x92, 0xba, 0x4e, 0x49, 0x4d, 0xc7, 0xb6, 0x32, 0x72, 0x00, 0x9b, 0x8c,
	0x11, 0xcd, 0x20, 0x95, 0x90, 0x7d, 0x70, 0x04, 0x21, 0x56, 0xf3, 0x18, 0x1f, 0xc7, 0x2f, 0xcb,
	0x00, 0x4d, 0x29, 0x88, 0xad, 0x26, 0x3a, 0x91, 0x0b, 0xfa, 0xe2, 0xc9, 0xa5, 0x21, 0xd3, 0x37,
	0xed, 0xa9, 0x68, 0x6b, 0xd7, 0x29, 0x89, 0xa5, 0xc2, 0x54, 0x13, 0xcf, 0xa0, 0x3b, 0x58, 0xb5,
	0x68, 0x00, 0xda, 0x49, 0x57, 0x07, 0x01, 0xb2, 0x3b, 0x4d, 0x3e, 0x18, 0xf6, 0x87, 0x50, 0x54,
	0x06, 0x48, 0x13, 0x49, 0x27, 0xbe, 0xd7, 0x66, 0xd0, 0x29, 0x2c, 0xea, 0x99, 0x4e, 0x4c, 0x5f,
	0xf7, 0xfd, 0x11, 0x36, 0xec, 0x92, 0x80, 0xb0, 0x91, 0xa1, 0x45, 0x2f, 0x9c, 0xb8, 0x56, 0x31,
	0xb0, 0x2b, 0xd8, 0x4c, 0x91, 0x08, 0xf4, 0xbe, 0x86, 0x66, 0x17, 0x10, 0x99, 0x1a, 0x57, 0x7d,
	0x86, 0x76, 0xc2, 0x53, 0xbb, 0x62, 0xbb, 0xf0, 0x26, 0xf0, 0xef, 0x09, 0xa5, 0x6a, 0x6b, 0x23,
	0x11, 0x56, 0xfc, 0x0e, 0x70, 0x16, 0xe2, 0x9d, 0x89, 0xb2, 0x38, 0x87, 0x95, 0x84, 0xaa, 0xa0,
	0x6d, 0x15, 0xdf, 0xaa, 0x36, 0x46, 0xe4, 0x4f, 0x39, 0xa9, 0xbf, 0x79, 0x7f, 0xba, 0x9e, 0x4b,
	0xff, 0xb2, 0x87, 0x35, 0x4a, 0xdf, 0x83, 0xa2, 0x5a, 0x1b, 0x28, 0xd6, 0x61, 0x09, 0x2c, 0x7e,
	0xd1, 0xcc, 0xa0, 0x4f, 0xa0, 0x34, 0xd2, 0x2c, 0xb4, 0xce, 0xaf, 0x4c, 0x0d, 0x33, 0x3c, 0xbe,
	0x85, 0x95, 0x84, 0x6a, 0xa1, 0x98, 0x89, 0x23, 0x26, 0x28, 0x55, 0xd9, 0x18, 0xc4, 0x19, 0x2c,
	0x19, 0x4a, 0x86, 0xb6, 0xb4, 0xd0, 0xfa, 0x94, 0x18, 0x09, 0x34, 0x01, 0x25, 0xb5, 0x0a, 0x89,
	0xa8, 0xa9, 0x22, 0x66, 0x60, 0xfc, 0x0e, 0x28, 0xb9, 0x75, 0x51, 0x2d, 0x75, 0x1d, 0x0b, 0x8c,
	0x69, 0xeb, 0x5a, 0x9f, 0xbe, 0x98, 0x56, 0xa0, 0x9d, 0x74, 0x15, 0xb1, 0x4d, 0x9f, 0x45, 0x66,
	0xc4, 0x33, 0x4a, 0x08, 0x81, 0x7c, 0x46, 0x69, 0x02, 0x61, 0x94, 0x7d, 0x09, 0x6b, 0x36, 0x75,
	0x40, 0xbb, 0x66, 0xf3, 0xa6, 0xe0, 0xfc, 0xca, 0x1f, 0xb4, 0xbe, 0x21, 0xc7, 0x0f, 0xda, 0x2a,
	0x29, 0xce, 0x94, 0xc5, 0x3a, 0x22, 0xc5, 0xd8, 0xe9, 0xa8, 0x96, 0xba, 0xec, 0x0d, 0x52, 0x52,
	0xc4, 0x80, 0x01, 0x7f, 0xcd, 0x7f, 0x98, 0x69, 0x71, 0xd1, 0x7b, 0xaa, 0x6f, 0xb6, 0xbd, 0x6c,
	0x94, 0xdb, 0x82, 0x55, 0xcb, 0x0e, 0x97, 0xa4, 0xa6, 0x6f, 0x77, 0x1d, 0xa5, 0x5b, 0xe0, 0xff,
	0xe4, 0x7c, 0xf6, 0x2a, 0x00, 0x00, 0xff, 0xff, 0x97, 0x3e, 0x21, 0xc0, 0x06, 0x0d, 0x00, 0x00,
}
