// Code generated by protoc-gen-go.
// source: sharedb.proto
// DO NOT EDIT!

/*
Package sharedb is a generated protocol buffer package.

It is generated from these files:
	sharedb.proto

It has these top-level messages:
	GetRequest
	GetResponse
	PutRequest
	PutResponse
	DeleteRequest
	DeleteResponse
	DatabasesRequest
	DatabasesResponse
	BucketsRequest
	BucketsResponse
	KeysRequest
	KeysResponse
*/
package sharedb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GetRequest struct {
	Database string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}

type GetResponse struct {
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *GetResponse) Reset()         { *m = GetResponse{} }
func (m *GetResponse) String() string { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()    {}

type PutRequest struct {
	Database string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Value    []byte `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PutRequest) Reset()         { *m = PutRequest{} }
func (m *PutRequest) String() string { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()    {}

type PutResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *PutResponse) Reset()         { *m = PutResponse{} }
func (m *PutResponse) String() string { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()    {}

type DeleteRequest struct {
	Database string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Bucket   string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Key      string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}

type DeleteResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}

type DatabasesRequest struct {
}

func (m *DatabasesRequest) Reset()         { *m = DatabasesRequest{} }
func (m *DatabasesRequest) String() string { return proto.CompactTextString(m) }
func (*DatabasesRequest) ProtoMessage()    {}

type DatabasesResponse struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *DatabasesResponse) Reset()         { *m = DatabasesResponse{} }
func (m *DatabasesResponse) String() string { return proto.CompactTextString(m) }
func (*DatabasesResponse) ProtoMessage()    {}

type BucketsRequest struct {
	Database string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
}

func (m *BucketsRequest) Reset()         { *m = BucketsRequest{} }
func (m *BucketsRequest) String() string { return proto.CompactTextString(m) }
func (*BucketsRequest) ProtoMessage()    {}

type BucketsResponse struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *BucketsResponse) Reset()         { *m = BucketsResponse{} }
func (m *BucketsResponse) String() string { return proto.CompactTextString(m) }
func (*BucketsResponse) ProtoMessage()    {}

type KeysRequest struct {
	Database  string `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Bucket    string `protobuf:"bytes,2,opt,name=bucket" json:"bucket,omitempty"`
	Prefix    string `protobuf:"bytes,3,opt,name=prefix" json:"prefix,omitempty"`
	MinPrefix string `protobuf:"bytes,4,opt,name=minPrefix" json:"minPrefix,omitempty"`
	MaxPrefix string `protobuf:"bytes,5,opt,name=maxPrefix" json:"maxPrefix,omitempty"`
}

func (m *KeysRequest) Reset()         { *m = KeysRequest{} }
func (m *KeysRequest) String() string { return proto.CompactTextString(m) }
func (*KeysRequest) ProtoMessage()    {}

type KeysResponse struct {
	Values []string `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *KeysResponse) Reset()         { *m = KeysResponse{} }
func (m *KeysResponse) String() string { return proto.CompactTextString(m) }
func (*KeysResponse) ProtoMessage()    {}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ShareDB service

type ShareDBClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Databases(ctx context.Context, in *DatabasesRequest, opts ...grpc.CallOption) (*DatabasesResponse, error)
	Buckets(ctx context.Context, in *BucketsRequest, opts ...grpc.CallOption) (*BucketsResponse, error)
	Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error)
}

type shareDBClient struct {
	cc *grpc.ClientConn
}

func NewShareDBClient(cc *grpc.ClientConn) ShareDBClient {
	return &shareDBClient{cc}
}

func (c *shareDBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDBClient) Databases(ctx context.Context, in *DatabasesRequest, opts ...grpc.CallOption) (*DatabasesResponse, error) {
	out := new(DatabasesResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Databases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDBClient) Buckets(ctx context.Context, in *BucketsRequest, opts ...grpc.CallOption) (*BucketsResponse, error) {
	out := new(BucketsResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Buckets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareDBClient) Keys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := grpc.Invoke(ctx, "/sharedb.ShareDB/Keys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShareDB service

type ShareDBServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Databases(context.Context, *DatabasesRequest) (*DatabasesResponse, error)
	Buckets(context.Context, *BucketsRequest) (*BucketsResponse, error)
	Keys(context.Context, *KeysRequest) (*KeysResponse, error)
}

func RegisterShareDBServer(s *grpc.Server, srv ShareDBServer) {
	s.RegisterService(&_ShareDB_serviceDesc, srv)
}

func _ShareDB_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ShareDB_Put_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(PutRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Put(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ShareDB_Delete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ShareDB_Databases_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DatabasesRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Databases(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ShareDB_Buckets_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(BucketsRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Buckets(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _ShareDB_Keys_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(KeysRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ShareDBServer).Keys(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ShareDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sharedb.ShareDB",
	HandlerType: (*ShareDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ShareDB_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ShareDB_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ShareDB_Delete_Handler,
		},
		{
			MethodName: "Databases",
			Handler:    _ShareDB_Databases_Handler,
		},
		{
			MethodName: "Buckets",
			Handler:    _ShareDB_Buckets_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _ShareDB_Keys_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
