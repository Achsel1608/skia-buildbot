// Code generated by protoc-gen-go.
// source: diffservice.proto
// DO NOT EDIT!

/*
Package diffstore is a generated protocol buffer package.

It is generated from these files:
	diffservice.proto

It has these top-level messages:
	Empty
	GetDiffsRequest
	GetDiffsResponse
	PurgeDigestsRequest
	UnavailableDigestsResponse
	WarmDigestsRequest
	WarmDiffsRequest
	DiffMetricsResponse
	DigestFailureResponse
*/
package diffstore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetDiffsRequest struct {
	Priority     int64    `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	MainDigest   string   `protobuf:"bytes,2,opt,name=mainDigest" json:"mainDigest,omitempty"`
	RightDigests []string `protobuf:"bytes,3,rep,name=rightDigests" json:"rightDigests,omitempty"`
}

func (m *GetDiffsRequest) Reset()                    { *m = GetDiffsRequest{} }
func (m *GetDiffsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDiffsRequest) ProtoMessage()               {}
func (*GetDiffsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetDiffsRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *GetDiffsRequest) GetMainDigest() string {
	if m != nil {
		return m.MainDigest
	}
	return ""
}

func (m *GetDiffsRequest) GetRightDigests() []string {
	if m != nil {
		return m.RightDigests
	}
	return nil
}

type GetDiffsResponse struct {
	Diffs map[string]*DiffMetricsResponse `protobuf:"bytes,1,rep,name=diffs" json:"diffs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetDiffsResponse) Reset()                    { *m = GetDiffsResponse{} }
func (m *GetDiffsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDiffsResponse) ProtoMessage()               {}
func (*GetDiffsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetDiffsResponse) GetDiffs() map[string]*DiffMetricsResponse {
	if m != nil {
		return m.Diffs
	}
	return nil
}

type PurgeDigestsRequest struct {
	Digests  []string `protobuf:"bytes,1,rep,name=digests" json:"digests,omitempty"`
	PurgeGCS bool     `protobuf:"varint,2,opt,name=purgeGCS" json:"purgeGCS,omitempty"`
}

func (m *PurgeDigestsRequest) Reset()                    { *m = PurgeDigestsRequest{} }
func (m *PurgeDigestsRequest) String() string            { return proto.CompactTextString(m) }
func (*PurgeDigestsRequest) ProtoMessage()               {}
func (*PurgeDigestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PurgeDigestsRequest) GetDigests() []string {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *PurgeDigestsRequest) GetPurgeGCS() bool {
	if m != nil {
		return m.PurgeGCS
	}
	return false
}

type UnavailableDigestsResponse struct {
	DigestFailures map[string]*DigestFailureResponse `protobuf:"bytes,1,rep,name=digestFailures" json:"digestFailures,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UnavailableDigestsResponse) Reset()                    { *m = UnavailableDigestsResponse{} }
func (m *UnavailableDigestsResponse) String() string            { return proto.CompactTextString(m) }
func (*UnavailableDigestsResponse) ProtoMessage()               {}
func (*UnavailableDigestsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UnavailableDigestsResponse) GetDigestFailures() map[string]*DigestFailureResponse {
	if m != nil {
		return m.DigestFailures
	}
	return nil
}

type WarmDigestsRequest struct {
	Priority int64    `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	Digests  []string `protobuf:"bytes,2,rep,name=digests" json:"digests,omitempty"`
	Sync     bool     `protobuf:"varint,3,opt,name=sync" json:"sync,omitempty"`
}

func (m *WarmDigestsRequest) Reset()                    { *m = WarmDigestsRequest{} }
func (m *WarmDigestsRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmDigestsRequest) ProtoMessage()               {}
func (*WarmDigestsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WarmDigestsRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *WarmDigestsRequest) GetDigests() []string {
	if m != nil {
		return m.Digests
	}
	return nil
}

func (m *WarmDigestsRequest) GetSync() bool {
	if m != nil {
		return m.Sync
	}
	return false
}

type WarmDiffsRequest struct {
	Priority     int64    `protobuf:"varint,1,opt,name=priority" json:"priority,omitempty"`
	LeftDigests  []string `protobuf:"bytes,2,rep,name=leftDigests" json:"leftDigests,omitempty"`
	RightDigests []string `protobuf:"bytes,3,rep,name=rightDigests" json:"rightDigests,omitempty"`
}

func (m *WarmDiffsRequest) Reset()                    { *m = WarmDiffsRequest{} }
func (m *WarmDiffsRequest) String() string            { return proto.CompactTextString(m) }
func (*WarmDiffsRequest) ProtoMessage()               {}
func (*WarmDiffsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WarmDiffsRequest) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *WarmDiffsRequest) GetLeftDigests() []string {
	if m != nil {
		return m.LeftDigests
	}
	return nil
}

func (m *WarmDiffsRequest) GetRightDigests() []string {
	if m != nil {
		return m.RightDigests
	}
	return nil
}

type DiffMetricsResponse struct {
	NumDiffPixels    int32              `protobuf:"varint,1,opt,name=NumDiffPixels" json:"NumDiffPixels,omitempty"`
	PixelDiffPercent float32            `protobuf:"fixed32,2,opt,name=PixelDiffPercent" json:"PixelDiffPercent,omitempty"`
	MaxRGBADiffs     []int32            `protobuf:"varint,3,rep,packed,name=MaxRGBADiffs" json:"MaxRGBADiffs,omitempty"`
	DimDiffer        bool               `protobuf:"varint,4,opt,name=DimDiffer" json:"DimDiffer,omitempty"`
	Diffs            map[string]float32 `protobuf:"bytes,5,rep,name=Diffs" json:"Diffs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
}

func (m *DiffMetricsResponse) Reset()                    { *m = DiffMetricsResponse{} }
func (m *DiffMetricsResponse) String() string            { return proto.CompactTextString(m) }
func (*DiffMetricsResponse) ProtoMessage()               {}
func (*DiffMetricsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DiffMetricsResponse) GetNumDiffPixels() int32 {
	if m != nil {
		return m.NumDiffPixels
	}
	return 0
}

func (m *DiffMetricsResponse) GetPixelDiffPercent() float32 {
	if m != nil {
		return m.PixelDiffPercent
	}
	return 0
}

func (m *DiffMetricsResponse) GetMaxRGBADiffs() []int32 {
	if m != nil {
		return m.MaxRGBADiffs
	}
	return nil
}

func (m *DiffMetricsResponse) GetDimDiffer() bool {
	if m != nil {
		return m.DimDiffer
	}
	return false
}

func (m *DiffMetricsResponse) GetDiffs() map[string]float32 {
	if m != nil {
		return m.Diffs
	}
	return nil
}

type DigestFailureResponse struct {
	Digest string `protobuf:"bytes,1,opt,name=Digest" json:"Digest,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=Reason" json:"Reason,omitempty"`
	TS     int64  `protobuf:"varint,3,opt,name=TS" json:"TS,omitempty"`
}

func (m *DigestFailureResponse) Reset()                    { *m = DigestFailureResponse{} }
func (m *DigestFailureResponse) String() string            { return proto.CompactTextString(m) }
func (*DigestFailureResponse) ProtoMessage()               {}
func (*DigestFailureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DigestFailureResponse) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

func (m *DigestFailureResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *DigestFailureResponse) GetTS() int64 {
	if m != nil {
		return m.TS
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "diffstore.Empty")
	proto.RegisterType((*GetDiffsRequest)(nil), "diffstore.GetDiffsRequest")
	proto.RegisterType((*GetDiffsResponse)(nil), "diffstore.GetDiffsResponse")
	proto.RegisterType((*PurgeDigestsRequest)(nil), "diffstore.PurgeDigestsRequest")
	proto.RegisterType((*UnavailableDigestsResponse)(nil), "diffstore.UnavailableDigestsResponse")
	proto.RegisterType((*WarmDigestsRequest)(nil), "diffstore.WarmDigestsRequest")
	proto.RegisterType((*WarmDiffsRequest)(nil), "diffstore.WarmDiffsRequest")
	proto.RegisterType((*DiffMetricsResponse)(nil), "diffstore.DiffMetricsResponse")
	proto.RegisterType((*DigestFailureResponse)(nil), "diffstore.DigestFailureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DiffService service

type DiffServiceClient interface {
	GetDiffs(ctx context.Context, in *GetDiffsRequest, opts ...grpc.CallOption) (*GetDiffsResponse, error)
	WarmDigests(ctx context.Context, in *WarmDigestsRequest, opts ...grpc.CallOption) (*Empty, error)
	WarmDiffs(ctx context.Context, in *WarmDiffsRequest, opts ...grpc.CallOption) (*Empty, error)
	UnavailableDigests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UnavailableDigestsResponse, error)
	PurgeDigests(ctx context.Context, in *PurgeDigestsRequest, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type diffServiceClient struct {
	cc *grpc.ClientConn
}

func NewDiffServiceClient(cc *grpc.ClientConn) DiffServiceClient {
	return &diffServiceClient{cc}
}

func (c *diffServiceClient) GetDiffs(ctx context.Context, in *GetDiffsRequest, opts ...grpc.CallOption) (*GetDiffsResponse, error) {
	out := new(GetDiffsResponse)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/GetDiffs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffServiceClient) WarmDigests(ctx context.Context, in *WarmDigestsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/WarmDigests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffServiceClient) WarmDiffs(ctx context.Context, in *WarmDiffsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/WarmDiffs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffServiceClient) UnavailableDigests(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UnavailableDigestsResponse, error) {
	out := new(UnavailableDigestsResponse)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/UnavailableDigests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffServiceClient) PurgeDigests(ctx context.Context, in *PurgeDigestsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/PurgeDigests", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/diffstore.DiffService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiffService service

type DiffServiceServer interface {
	GetDiffs(context.Context, *GetDiffsRequest) (*GetDiffsResponse, error)
	WarmDigests(context.Context, *WarmDigestsRequest) (*Empty, error)
	WarmDiffs(context.Context, *WarmDiffsRequest) (*Empty, error)
	UnavailableDigests(context.Context, *Empty) (*UnavailableDigestsResponse, error)
	PurgeDigests(context.Context, *PurgeDigestsRequest) (*Empty, error)
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterDiffServiceServer(s *grpc.Server, srv DiffServiceServer) {
	s.RegisterService(&_DiffService_serviceDesc, srv)
}

func _DiffService_GetDiffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).GetDiffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/GetDiffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).GetDiffs(ctx, req.(*GetDiffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffService_WarmDigests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmDigestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).WarmDigests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/WarmDigests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).WarmDigests(ctx, req.(*WarmDigestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffService_WarmDiffs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarmDiffsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).WarmDiffs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/WarmDiffs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).WarmDiffs(ctx, req.(*WarmDiffsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffService_UnavailableDigests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).UnavailableDigests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/UnavailableDigests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).UnavailableDigests(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffService_PurgeDigests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurgeDigestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).PurgeDigests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/PurgeDigests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).PurgeDigests(ctx, req.(*PurgeDigestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiffService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffstore.DiffService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _DiffService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "diffstore.DiffService",
	HandlerType: (*DiffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDiffs",
			Handler:    _DiffService_GetDiffs_Handler,
		},
		{
			MethodName: "WarmDigests",
			Handler:    _DiffService_WarmDigests_Handler,
		},
		{
			MethodName: "WarmDiffs",
			Handler:    _DiffService_WarmDiffs_Handler,
		},
		{
			MethodName: "UnavailableDigests",
			Handler:    _DiffService_UnavailableDigests_Handler,
		},
		{
			MethodName: "PurgeDigests",
			Handler:    _DiffService_PurgeDigests_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DiffService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diffservice.proto",
}

func init() { proto.RegisterFile("diffservice.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0xed, 0xba, 0xad, 0x6f, 0xfa, 0xf5, 0x0b, 0xb7, 0x80, 0x2c, 0x17, 0x2a, 0xcb, 0x02,
	0x14, 0x10, 0xca, 0xa2, 0x20, 0x54, 0x50, 0x25, 0xa0, 0x24, 0x64, 0x81, 0x0a, 0xd1, 0xa4, 0xa8,
	0xac, 0x90, 0xdc, 0x74, 0x12, 0x46, 0x38, 0x76, 0x3a, 0x76, 0xa2, 0xe6, 0x49, 0x78, 0x01, 0x56,
	0x3c, 0x17, 0x0f, 0x82, 0x3c, 0xe3, 0x38, 0xe3, 0xd8, 0x84, 0xec, 0xe6, 0xde, 0xdc, 0x9f, 0x33,
	0xc7, 0x67, 0x4e, 0xe0, 0xd6, 0x15, 0x1b, 0x0c, 0x62, 0xca, 0xa7, 0xac, 0x4f, 0x9b, 0x63, 0x1e,
	0x25, 0x11, 0x5a, 0x22, 0x95, 0x44, 0x9c, 0x7a, 0xdb, 0x60, 0xb6, 0x47, 0xe3, 0x64, 0xe6, 0x5d,
	0xc3, 0xff, 0x1d, 0x9a, 0xb4, 0xd2, 0x1f, 0x08, 0xbd, 0x9e, 0xd0, 0x38, 0x41, 0x07, 0x76, 0xc6,
	0x9c, 0x45, 0x9c, 0x25, 0x33, 0x5b, 0x73, 0xb5, 0x86, 0x41, 0xf2, 0x18, 0x0f, 0x01, 0x46, 0x3e,
	0x0b, 0x5b, 0x6c, 0x48, 0xe3, 0xc4, 0xd6, 0x5d, 0xad, 0x61, 0x11, 0x25, 0x83, 0x1e, 0xec, 0x72,
	0x36, 0xfc, 0x96, 0xc8, 0x30, 0xb6, 0x0d, 0xd7, 0x68, 0x58, 0xa4, 0x90, 0xf3, 0x7e, 0x69, 0x50,
	0x5f, 0xec, 0x8c, 0xc7, 0x51, 0x18, 0x53, 0x3c, 0x01, 0x53, 0xa0, 0xb3, 0x35, 0xd7, 0x68, 0xd4,
	0x8e, 0x1e, 0x35, 0x73, 0xac, 0xcd, 0xe5, 0xda, 0xa6, 0x88, 0xda, 0x61, 0xc2, 0x67, 0x44, 0x36,
	0x39, 0x5f, 0x00, 0x16, 0x49, 0xac, 0x83, 0xf1, 0x9d, 0x4a, 0xec, 0x16, 0x49, 0x8f, 0xf8, 0x1c,
	0xcc, 0xa9, 0x1f, 0x4c, 0xa8, 0x40, 0x5c, 0x3b, 0x3a, 0x54, 0xa6, 0xa7, 0x7d, 0x67, 0x34, 0xe1,
	0xac, 0x9f, 0x2f, 0x20, 0xb2, 0xf8, 0x95, 0x7e, 0xac, 0x79, 0x1f, 0x60, 0xbf, 0x3b, 0xe1, 0x43,
	0x9a, 0x81, 0x9f, 0x73, 0x64, 0xc3, 0xf6, 0x55, 0x76, 0x45, 0x4d, 0x5c, 0x71, 0x1e, 0x0a, 0xf6,
	0xd2, 0x86, 0xce, 0xbb, 0x9e, 0xd8, 0xb6, 0x43, 0xf2, 0xd8, 0xfb, 0xad, 0x81, 0xf3, 0x39, 0xf4,
	0xa7, 0x3e, 0x0b, 0xfc, 0xcb, 0x60, 0x31, 0x33, 0xe3, 0xc0, 0x87, 0x3d, 0x39, 0xe5, 0xbd, 0xcf,
	0x82, 0x09, 0xa7, 0x73, 0x32, 0x5e, 0x2a, 0x70, 0xff, 0xde, 0xde, 0x6c, 0x15, 0x7a, 0x25, 0x3f,
	0x4b, 0x03, 0x9d, 0x3e, 0xec, 0x57, 0x94, 0x55, 0x30, 0xf6, 0xa2, 0xc8, 0x98, 0x5b, 0x60, 0x4c,
	0x19, 0x50, 0xc5, 0xd9, 0x57, 0xc0, 0x0b, 0x9f, 0x8f, 0x96, 0x28, 0x5b, 0x25, 0x2b, 0x85, 0x4e,
	0xbd, 0x48, 0x27, 0xc2, 0x66, 0x3c, 0x0b, 0xfb, 0xb6, 0x21, 0xa8, 0x14, 0x67, 0x2f, 0x81, 0xba,
	0x9c, 0xbf, 0xa6, 0x68, 0x5d, 0xa8, 0x05, 0x74, 0x90, 0x6b, 0x52, 0x6e, 0x50, 0x53, 0x6b, 0xc9,
	0xf6, 0xa7, 0x9e, 0x72, 0x57, 0x12, 0x0b, 0x3e, 0x80, 0xff, 0x3e, 0x4e, 0x04, 0x98, 0x2e, 0xbb,
	0xa1, 0x41, 0x2c, 0xd6, 0x9b, 0xa4, 0x98, 0xc4, 0x27, 0x50, 0x17, 0x27, 0x91, 0xa2, 0xbc, 0x4f,
	0x43, 0xf9, 0x7c, 0x74, 0x52, 0xca, 0xa7, 0x68, 0xce, 0xfc, 0x1b, 0xd2, 0x39, 0x7d, 0x2b, 0xae,
	0x28, 0xd0, 0x98, 0xa4, 0x90, 0xc3, 0x7b, 0x60, 0xb5, 0x98, 0x58, 0x40, 0xb9, 0xbd, 0x29, 0xc8,
	0x59, 0x24, 0xf0, 0x35, 0x98, 0xb2, 0xd5, 0x14, 0x02, 0x7a, 0xbc, 0x5a, 0xef, 0x85, 0x07, 0x25,
	0xce, 0xce, 0xf1, 0x3f, 0x1e, 0xd4, 0x6d, 0x55, 0x1e, 0xba, 0xfa, 0xf1, 0x2f, 0xe0, 0x4e, 0xa5,
	0x40, 0xf0, 0x2e, 0x6c, 0x65, 0xb6, 0x21, 0xe7, 0x64, 0x51, 0x9a, 0x27, 0xd4, 0x8f, 0xa3, 0x30,
	0xb3, 0x93, 0x2c, 0xc2, 0x3d, 0xd0, 0xcf, 0x7b, 0xe2, 0xbb, 0x1b, 0x44, 0x3f, 0xef, 0x1d, 0xfd,
	0x30, 0xa0, 0x96, 0x62, 0xea, 0x49, 0x4f, 0xc3, 0x36, 0xec, 0xcc, 0x9d, 0x01, 0x9d, 0x4a, 0xbb,
	0x10, 0xca, 0x70, 0x0e, 0x56, 0x58, 0x89, 0xb7, 0x81, 0x6f, 0xa0, 0xa6, 0x88, 0x15, 0xef, 0x2b,
	0xd5, 0x65, 0x11, 0x3b, 0x75, 0xe5, 0x67, 0x69, 0xa0, 0x1b, 0x78, 0x02, 0x56, 0x2e, 0x47, 0x3c,
	0x28, 0xf5, 0x2b, 0x50, 0xaa, 0xba, 0x3f, 0x01, 0x96, 0xdf, 0x34, 0x96, 0x2a, 0x9d, 0x87, 0x6b,
	0x99, 0x80, 0xb7, 0x81, 0xa7, 0xb0, 0xab, 0x3a, 0x16, 0xaa, 0x66, 0x57, 0x61, 0x65, 0x95, 0xa0,
	0x9e, 0xc2, 0x66, 0x97, 0x85, 0xc3, 0x0a, 0x18, 0x15, 0xd5, 0x97, 0x5b, 0xe2, 0xef, 0xe5, 0xd9,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x87, 0xa8, 0x21, 0x73, 0x06, 0x00, 0x00,
}
